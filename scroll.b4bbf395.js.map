{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,oDAQMC,EAAW,2BACXC,EAAU,qCACZC,EAAU,EACVC,EAAY,GAGVC,EAAK,CACPC,KAAMC,SAASC,cAAc,gBAC7BC,MAAOF,SAASC,cAAc,iBAC9BE,IAAKH,SAASC,cAAc,YAC5BG,MAAOJ,SAASC,cAAc,cAK9BI,EAAU,IAAIC,EAAAC,GAAJ,CAAmB,cAO3BC,EAAW,IAAIC,sBAuHrB,SAA4BC,EAASC,GACnCD,EAAQE,SAAQ,SAACC,GAEXA,EAAMC,iBACRlB,GAAa,EAEbmB,IACAC,KAAKC,GACLC,OAAM,SAAAC,GACNC,EAAAC,OAAOC,QAAQ,gCACfC,QAAQC,MAAML,E,UAtIJ,CACdM,KAAM,KACNC,WAAY,QACZC,UAAW,IAIb7B,EAAKC,KAAK6B,iBAAiB,UAc3B,SAAsBC,GAClBA,EAAMC,iBAENlC,EAAU,EACVE,EAAKK,IAAI4B,UAAU,GAEnB,IAAMhC,EAAO8B,EAAMG,cAEF,MADjBnC,EAAcE,EAAKkC,SAASC,YAAYC,MAAMC,QAE5CrB,IACCC,KAAKC,GACLC,OAAM,SAAAC,GACLC,EAAAC,OAAOC,QAAQ,gCACfC,QAAQC,MAAML,E,IAIhBC,EAAAC,OAAOC,QAAQ,qB,IA3BrB,IAAQe,EAAuBrC,SAC5BC,cAAc,YACdqC,kBAAkBC,wBAFbC,O,SAgCOzB,I,OAAA0B,EAAUC,MAAAC,KAAAC,U,UAAVH,I,OAAAA,EAAfnC,EAAAd,EAAA,CAAAc,EAAAuC,GAAAC,MAAA,SAAAC,I,IACUC,E,yEAAAA,EAAS,IAAIC,gBAAgB,CAC/BC,IAAKvD,EACLwD,EAAGtD,EACHuD,WAAY,QACZC,YAAa,aACbC,YAAY,EACZC,SA/DO,GAgEPC,KAAM5D,I,SAIG6D,EAAAC,QAAMC,IAAI,GAAeC,OAAZlE,EAAS,KAAUkE,OAAPZ,I,oFAZjBN,MAAAC,KAAAC,U,CAkBzB,SAAS3B,EAAqB4C,GACzB,GAAqC,IAAjCA,EAAcC,KAAKC,KAAKC,OACzB5C,EAAAC,OAAOC,QAAQ,gFAEf,CAGA,GAiBR,SAAsBuC,GAClB,IAAMI,GAKwBC,EALQL,EAAcC,KAAKC,KAMzDxC,QAAQ4C,IAAI,OAAQD,GAEbA,EAAIE,KAAI,SAAAC,G,IAAEC,EAAaD,EAAbC,cAAeC,EAAYF,EAAZE,aAAoBC,GAAFH,EAAJI,KAAWJ,EAALG,OAAOE,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAASP,EAATO,U,MACxE,wFAIuChB,OAD5BU,EAAc,8EAObV,OAN2BW,EAAa,0MAUxCX,OAJAc,EAAM,0GAQNd,OAJAY,EAAM,6GAQNZ,OAJAe,EAAS,8GAICf,OAAVgB,EAAU,wD,IAGfC,KAAK,KA7BpB,IAAkCX,EAJ9BpE,EAAKK,IAAI2E,mBAAmB,YAAab,GACzC5D,EAAQ0E,S,CAtBJC,CAAanB,GAEVjE,EAAU,EAAE,CACX,IAAMqF,EAlFH,GAkFcrF,EACjBwB,EAAAC,OAAO6D,KAAK,oBAA+BtB,OAAXqB,EAAW,Y,CAG/C1D,QAAQ4C,IAAIvE,EAAU,MAAOiE,EAAcC,KAAKqB,UAtFzC,IAuFJvF,EAAUiE,EAAcC,KAAKqB,UAvFzB,GAwFH3E,EAAS4E,QAAQtF,EAAKM,QAGtBI,EAAS6E,UAAUjF,OACnBgB,EAAAC,OAAO6D,KAAK,8D,EAhExBI,OAAOC,SAAS,CACdC,IAAkB,EAAbnD,EACLoD,SAAU,U","sources":["src/scroll.js"],"sourcesContent":["import axios from 'axios';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Описаний в документації\nimport SimpleLightbox from \"simplelightbox\";\n// Додатковий імпорт стилів\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst BASE_URL = \"https://pixabay.com/api/\";\nconst API_KEY = \"35857316-b0404474f9c8f0cfe824c51d8\";\nlet countPage=1;\nlet searchQuery=\"\";\nlet queryLimit=40;\n\nconst refs={\n    form: document.querySelector('#search-form'),\n    input: document.querySelector('.search-input'),\n    div: document.querySelector(\".gallery\"),\n    guard: document.querySelector('.js-guard'),\n\n    \n}\n\nlet gallery = new SimpleLightbox('.gallery a');\n\nconst options = {\n  root: null,\n  rootMargin: \"300px\",\n  threshold: 0,\n};\nconst observer = new IntersectionObserver(onScrollPagination, options);\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\n// плавне прокручування сторінки після запиту і відтворення кожної наступної групи зображень\nconst { height: cardHeight } = document\n  .querySelector(\".gallery\")\n  .firstElementChild.getBoundingClientRect();\n\nwindow.scrollBy({\n  top: cardHeight * 2,\n  behavior: \"smooth\",\n});\n///////////////////////////////////////////////////////////////////////////////////////////\n\nfunction onFormSubmit(event){\n    event.preventDefault();\n\n    countPage=1;\n    refs.div.innerHTML=\"\";\n\n    const form = event.currentTarget;\n    searchQuery = form.elements.searchQuery.value.trim();\n    if(searchQuery!==\"\"){\n      fetchQuery()\n      .then(handlerQueryResponse)\n      .catch(err=>{\n        Notify.failure('Ooops! Something went wrong!');\n        console.error(err);\n      });\n    }\n    else{\n      Notify.failure('Empty search input');\n    }\n    \n}\n\nasync function fetchQuery(){\n    const params = new URLSearchParams({\n        key: API_KEY,\n        q: searchQuery,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n        per_page: queryLimit,\n        page: countPage,\n\n    });\n\n    return await axios.get(`${BASE_URL}?${params}`);\n    \n    // return await axios.get(`${BASE_URL}?key=${API_KEY}&q=${searchQuery}&image_type=photo&orientation=horizontal&safesearch=true`);\n    \n}\n\nfunction handlerQueryResponse(queryResponse){\n     if (queryResponse.data.hits.length===0){\n        Notify.failure('Sorry, there are no images matching your search query. Please try again.');\n    }\n    else{\n        renderMarkup(queryResponse);\n         \n        if(countPage>1){\n            const countImage=countPage*queryLimit;\n            Notify.info(`Hooray! We found ${countImage} images.`);\n        }\n\n        console.log(countPage,\"   \", queryResponse.data.totalHits/queryLimit);\n        if(countPage<queryResponse.data.totalHits/queryLimit){\n            observer.observe(refs.guard);\n\n        }else{\n            observer.unobserve(guard);\n            Notify.info(\"We're sorry, but you've reached the end of search results.\");\n        }\n       \n    }\n}\n\nfunction renderMarkup(queryResponse){\n    const markup=createImageGalleryMarkup(queryResponse.data.hits);\n    refs.div.insertAdjacentHTML('beforeend', markup);\n    gallery.refresh();\n}\n\nfunction createImageGalleryMarkup(arr){\n    console.log(\"arr=\", arr);\n\n    return arr.map(({largeImageURL, webformatURL, tags, views, likes, comments, downloads})=>\n        `<div class=\"photo-card\">\n       \n        <div class=\"img-thumb\">\n        <a href=\"${largeImageURL}\" class=\"photo-card__link\">\n        <img class=\"photo-card__image\"\" src=\"${webformatURL}\" alt=\"{tags}\" loading=\"lazy\" data-source=\"large-image.jpg\"/>\n        </a>\n        </div>\n        <div class=\"info\">\n          <p class=\"info-item\">\n            <b>Likes</b>\n            <span>${likes}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Views</b>\n            <span>${views}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Comments</b>\n            <span>${comments}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Downloads</b>\n            <span>${downloads}</span>\n          </p>\n        </div>\n      </div>`).join('');\n    \n}\n\nfunction onScrollPagination(entries, observer){\n  entries.forEach((entry) => {\n    \n    if (entry.isIntersecting) {\n      countPage += 1;\n\n      fetchQuery()\n     .then(handlerQueryResponse)\n     .catch(err=>{\n      Notify.failure('Ooops! Something went wrong!');\n      console.error(err);\n     });\n    }\n  });\n}"],"names":["$bpxeT","parcelRequire","$5b53d4e451fa0420$var$BASE_URL","$5b53d4e451fa0420$var$API_KEY","$5b53d4e451fa0420$var$countPage","$5b53d4e451fa0420$var$searchQuery","$5b53d4e451fa0420$var$refs","form","document","querySelector","input","div","guard","$5b53d4e451fa0420$var$gallery","$parcel$interopDefault","$5IjG7","$5b53d4e451fa0420$var$observer","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","$5b53d4e451fa0420$var$fetchQuery","then","$5b53d4e451fa0420$var$handlerQueryResponse","catch","err","$h6c0i","Notify","failure","console","error","root","rootMargin","threshold","addEventListener","event","preventDefault","innerHTML","currentTarget","elements","searchQuery","value","trim","$5b53d4e451fa0420$var$cardHeight","firstElementChild","getBoundingClientRect","height","$5b53d4e451fa0420$var$_fetchQuery","apply","this","arguments","$2TvXO","mark","_callee","params","URLSearchParams","key","q","image_type","orientation","safesearch","per_page","page","$dIxxU","default","get","concat","queryResponse","data","hits","length","markup","arr","log","map","param","largeImageURL","webformatURL","views","tags","likes","comments","downloads","join","insertAdjacentHTML","refresh","$5b53d4e451fa0420$var$renderMarkup","countImage","info","totalHits","observe","unobserve","window","scrollBy","top","behavior"],"version":3,"file":"scroll.b4bbf395.js.map"}