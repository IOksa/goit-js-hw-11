{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,oDAQMC,EAAW,2BACXC,EAAU,qCACZC,EAAU,EACVC,EAAY,GAGVC,EAAK,CACPC,KAAMC,SAASC,cAAc,gBAC7BC,MAAOF,SAASC,cAAc,iBAC9BE,IAAKH,SAASC,cAAc,YAC5BG,MAAOJ,SAASC,cAAc,cAG9BI,EAAU,IAAIC,EAAAC,GAAJ,CAAmB,cAO3BC,EAAW,IAAIC,sBAyGrB,SAA4BC,EAASC,GACnCC,QAAQC,IAAI,2BACZH,EAAQI,SAAQ,SAACC,GAEXA,EAAMC,iBACRpB,GAAa,EAEbqB,IACAC,KAAKC,GACLC,OAAM,SAAAC,GACNC,EAAAC,OAAOC,QAAQ,gCACfZ,QAAQa,MAAMJ,E,UAzHJ,CACdK,KAAM,KACNC,WAAY,QACZC,UAAW,I,SA6BEX,I,OAAAY,EAAUC,MAAAC,KAAAC,U,UAAVH,I,OAAAA,EAAfvB,EAAAd,EAAA,CAAAc,EAAA2B,GAAAC,MAAA,SAAAC,I,IACUC,E,yEAAAA,EAAS,IAAIC,gBAAgB,CAC/BC,IAAK3C,EACL4C,EAAG1C,EACH2C,WAAY,QACZC,YAAa,aACbC,YAAY,EACZC,SAlDO,GAmDPC,KAAMhD,I,SAIGiD,EAAAC,QAAMC,IAAI,GAAeC,OAAZtD,EAAS,KAAUsD,OAAPZ,I,oFAZjBN,MAAAC,KAAAC,U,CAkBzB,SAASb,EAAqB8B,GACzB,GAAqC,IAAjCA,EAAcC,KAAKC,KAAKC,OACzB9B,EAAAC,OAAOC,QAAQ,gFAEf,CAGA,GAgBR,SAAsByB,GAClB,IAAMI,GAKwBC,EALQL,EAAcC,KAAKC,KAMzDvC,QAAQC,IAAI,OAAQyC,GAEbA,EAAIC,KAAI,SAAAC,G,IAAEC,EAAaD,EAAbC,cAAeC,EAAYF,EAAZE,aAAcC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAOC,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAASP,EAATO,U,MACxE,+EAGsCf,OAD3BS,EAAc,6EACmCT,OAAtBU,EAAa,WAMvCV,OANgDW,EAAK,6LAUrDX,OAJAa,EAAM,0GAQNb,OAJAY,EAAM,6GAQNZ,OAJAc,EAAS,8GAICd,OAAVe,EAAU,wD,IAGfC,KAAK,KA5BpB,IAAkCV,EAJ9BxD,EAAKK,IAAI8D,mBAAmB,YAAaZ,GACzChD,EAAQ6D,S,CArBJC,CAAalB,GAEVrD,EAAU,EAAE,CACX,IAAMwE,EArEH,GAqEcxE,EACjB0B,EAAAC,OAAO8C,KAAK,oBAA+BrB,OAAXoB,EAAW,Y,CAG/CxD,QAAQC,IAAIjB,EAAU,MAAOqD,EAAcC,KAAKoB,UAzEzC,IA0EJ1E,EAAUqD,EAAcC,KAAKoB,UA1EzB,GA2EH9D,EAAS+D,QAAQzE,EAAKM,QAGtBI,EAASgE,UAAU1E,EAAKM,OACxBkB,EAAAC,OAAO8C,KAAK,8D,EA7DxBvE,EAAKC,KAAK0E,iBAAiB,UAG3B,SAAsBC,GAClBA,EAAMC,iBAEN/E,EAAU,EACVE,EAAKK,IAAIyE,UAAU,GAEnB,IAAM7E,EAAO2E,EAAMG,cAEF,MADjBhF,EAAcE,EAAK+E,SAASC,YAAYC,MAAMC,QAE5ChE,IACCC,KAAKC,GACLC,OAAM,SAAAC,GACLC,EAAAC,OAAOC,QAAQ,gCACfZ,QAAQa,MAAMJ,E,IAIhBC,EAAAC,OAAOC,QAAQ,qB","sources":["src/scroll.js"],"sourcesContent":["import axios from 'axios';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Описаний в документації\nimport SimpleLightbox from \"simplelightbox\";\n// Додатковий імпорт стилів\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst BASE_URL = \"https://pixabay.com/api/\";\nconst API_KEY = \"35857316-b0404474f9c8f0cfe824c51d8\";\nlet countPage=1;\nlet searchQuery=\"\";\nlet queryLimit=40;\n\nconst refs={\n    form: document.querySelector('#search-form'),\n    input: document.querySelector('.search-input'),\n    div: document.querySelector(\".gallery\"),\n    guard: document.querySelector('.js-guard'),   \n}\n\nlet gallery = new SimpleLightbox('.gallery a');\n\nconst options = {\n  root: null,\n  rootMargin: \"300px\",\n  threshold: 0,\n};\nconst observer = new IntersectionObserver(onScrollPagination, options);\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(event){\n    event.preventDefault();\n\n    countPage=1;\n    refs.div.innerHTML=\"\";\n\n    const form = event.currentTarget;\n    searchQuery = form.elements.searchQuery.value.trim();\n    if(searchQuery!==\"\"){\n      fetchQuery()\n      .then(handlerQueryResponse)\n      .catch(err=>{\n        Notify.failure('Ooops! Something went wrong!');\n        console.error(err);\n      });\n    }\n    else{\n      Notify.failure('Empty search input');\n    }\n    \n}\n\nasync function fetchQuery(){\n    const params = new URLSearchParams({\n        key: API_KEY,\n        q: searchQuery,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n        per_page: queryLimit,\n        page: countPage,\n\n    });\n\n    return await axios.get(`${BASE_URL}?${params}`);\n    \n    // return await axios.get(`${BASE_URL}?key=${API_KEY}&q=${searchQuery}&image_type=photo&orientation=horizontal&safesearch=true`);\n    \n}\n\nfunction handlerQueryResponse(queryResponse){\n     if (queryResponse.data.hits.length===0){\n        Notify.failure('Sorry, there are no images matching your search query. Please try again.');\n    }\n    else{\n        renderMarkup(queryResponse);\n         \n        if(countPage>1){\n            const countImage=countPage*queryLimit;\n            Notify.info(`Hooray! We found ${countImage} images.`);\n        }\n\n        console.log(countPage,\"   \", queryResponse.data.totalHits/queryLimit);\n        if(countPage<queryResponse.data.totalHits/queryLimit){\n            observer.observe(refs.guard);\n\n        }else{\n            observer.unobserve(refs.guard);\n            Notify.info(\"We're sorry, but you've reached the end of search results.\");\n        }   \n    }\n}\n\nfunction renderMarkup(queryResponse){\n    const markup=createImageGalleryMarkup(queryResponse.data.hits);\n    refs.div.insertAdjacentHTML('beforeend', markup);\n    gallery.refresh();\n}\n\nfunction createImageGalleryMarkup(arr){\n    console.log(\"arr=\", arr);\n\n    return arr.map(({largeImageURL, webformatURL, tags, views, likes, comments, downloads})=>\n        `<div class=\"photo-card\">\n        <div class=\"img-thumb\">\n        <a href=\"${largeImageURL}\" class=\"photo-card__link\">\n        <img class=\"photo-card__image\" src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" data-source=\"large-image.jpg\"/>\n        </a>\n        </div>\n        <div class=\"info\">\n          <p class=\"info-item\">\n            <b>Likes</b>\n            <span>${likes}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Views</b>\n            <span>${views}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Comments</b>\n            <span>${comments}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Downloads</b>\n            <span>${downloads}</span>\n          </p>\n        </div>\n      </div>`).join('');\n}\n\nfunction onScrollPagination(entries, observer){\n  console.log('I am onScrollPagination');\n  entries.forEach((entry) => {\n    \n    if (entry.isIntersecting) {\n      countPage += 1;\n\n      fetchQuery()\n     .then(handlerQueryResponse)\n     .catch(err=>{\n      Notify.failure('Ooops! Something went wrong!');\n      console.error(err);\n     });\n    }\n  });\n}"],"names":["$bpxeT","parcelRequire","$5b53d4e451fa0420$var$BASE_URL","$5b53d4e451fa0420$var$API_KEY","$5b53d4e451fa0420$var$countPage","$5b53d4e451fa0420$var$searchQuery","$5b53d4e451fa0420$var$refs","form","document","querySelector","input","div","guard","$5b53d4e451fa0420$var$gallery","$parcel$interopDefault","$5IjG7","$5b53d4e451fa0420$var$observer","IntersectionObserver","entries","observer","console","log","forEach","entry","isIntersecting","$5b53d4e451fa0420$var$fetchQuery","then","$5b53d4e451fa0420$var$handlerQueryResponse","catch","err","$h6c0i","Notify","failure","error","root","rootMargin","threshold","$5b53d4e451fa0420$var$_fetchQuery","apply","this","arguments","$2TvXO","mark","_callee","params","URLSearchParams","key","q","image_type","orientation","safesearch","per_page","page","$dIxxU","default","get","concat","queryResponse","data","hits","length","markup","arr","map","param","largeImageURL","webformatURL","tags","views","likes","comments","downloads","join","insertAdjacentHTML","refresh","$5b53d4e451fa0420$var$renderMarkup","countImage","info","totalHits","observe","unobserve","addEventListener","event","preventDefault","innerHTML","currentTarget","elements","searchQuery","value","trim"],"version":3,"file":"scroll.50782e31.js.map"}