{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,0BAUA,IAAIC,EAAU,EACVC,EAAY,GAGhB,MAAMC,EAAK,CACPC,KAAMC,SAASC,cAAc,gBAC7BC,MAAOF,SAASC,cAAc,iBAC9BE,IAAKH,SAASC,cAAc,YAC5BG,MAAOJ,SAASC,cAAc,cAGlC,IAAII,EAAU,IAAIC,EAAAC,GAAJ,CAAmB,cAEjC,MAKMC,EAAW,IAAIC,sBAyGrB,SAA4BC,EAASC,GACnCC,QAAQC,IAAI,2BACZH,EAAQI,SAASC,IAEXA,EAAMC,iBACRpB,GAAa,EAEbqB,IACAC,KAAKC,GACLC,OAAMC,IACNC,EAAAC,OAAOC,QAAQ,gCACfZ,QAAQa,MAAMJ,EAAI,I,MAzHR,CACdK,KAAM,KACNC,WAAY,QACZC,UAAW,IA6BbC,eAAeZ,IACX,MAAMa,EAAS,IAAIC,gBAAgB,CAC/BC,IAhDQ,qCAiDRC,EAAGpC,EACHqC,WAAY,QACZC,YAAa,aACbC,YAAY,EACZC,SAlDO,GAmDPC,KAAM1C,IAIV,aAAaF,EAAA6C,QAAMC,IAAI,4BAAeV,I,CAM1C,SAASX,EAAqBsB,GACzB,GAAqC,IAAjCA,EAAcC,KAAKC,KAAKC,OACzBtB,EAAAC,OAAOC,QAAQ,gFAEf,CAGA,GAgBR,SAAsBiB,GAClB,MAAMI,GAKwBC,EALQL,EAAcC,KAAKC,KAMzD/B,QAAQC,IAAI,OAAQiC,GAEbA,EAAIC,KAAI,EAACC,cAACA,EAAaC,aAAEA,EAAYC,KAAEA,EAAIC,MAAEA,EAAKC,MAAEA,EAAKC,SAAEA,EAAQC,UAAEA,KACxE,+EAEWN,6EAC2BC,WAAsBC,6LAMhDE,0GAIAD,6GAIAE,8GAIAC,2DAGLC,KAAK,KA5BpB,IAAkCT,EAJ9BhD,EAAKK,IAAIqD,mBAAmB,YAAaX,GACzCxC,EAAQoD,S,CArBJC,CAAajB,GAEV7C,EAAU,EAAE,CACX,MAAM+D,EArEH,GAqEc/D,EACjB0B,EAAAC,OAAOqC,KAAK,oBAAoBD,Y,CAGpC/C,QAAQC,IAAIjB,EAAU,MAAO6C,EAAcC,KAAKmB,UAzEzC,IA0EJjE,EAAU6C,EAAcC,KAAKmB,UA1EzB,GA2EHrD,EAASsD,QAAQhE,EAAKM,QAGtBI,EAASuD,UAAUjE,EAAKM,OACxBkB,EAAAC,OAAOqC,KAAK,8D,EA7DxB9D,EAAKC,KAAKiE,iBAAiB,UAG3B,SAAsBC,GAClBA,EAAMC,iBAENtE,EAAU,EACVE,EAAKK,IAAIgE,UAAU,GAEnB,MAAMpE,EAAOkE,EAAMG,cACnBvE,EAAcE,EAAKsE,SAASC,YAAYC,MAAMC,OAC7B,KAAd3E,EACDoB,IACCC,KAAKC,GACLC,OAAMC,IACLC,EAAAC,OAAOC,QAAQ,gCACfZ,QAAQa,MAAMJ,EAAI,IAIpBC,EAAAC,OAAOC,QAAQ,qB","sources":["src/scroll.js"],"sourcesContent":["import axios from 'axios';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Описаний в документації\nimport SimpleLightbox from \"simplelightbox\";\n// Додатковий імпорт стилів\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst BASE_URL = \"https://pixabay.com/api/\";\nconst API_KEY = \"35857316-b0404474f9c8f0cfe824c51d8\";\nlet countPage=1;\nlet searchQuery=\"\";\nlet queryLimit=40;\n\nconst refs={\n    form: document.querySelector('#search-form'),\n    input: document.querySelector('.search-input'),\n    div: document.querySelector(\".gallery\"),\n    guard: document.querySelector('.js-guard'),   \n}\n\nlet gallery = new SimpleLightbox('.gallery a');\n\nconst options = {\n  root: null,\n  rootMargin: \"300px\",\n  threshold: 0,\n};\nconst observer = new IntersectionObserver(onScrollPagination, options);\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(event){\n    event.preventDefault();\n\n    countPage=1;\n    refs.div.innerHTML=\"\";\n\n    const form = event.currentTarget;\n    searchQuery = form.elements.searchQuery.value.trim();\n    if(searchQuery!==\"\"){\n      fetchQuery()\n      .then(handlerQueryResponse)\n      .catch(err=>{\n        Notify.failure('Ooops! Something went wrong!');\n        console.error(err);\n      });\n    }\n    else{\n      Notify.failure('Empty search input');\n    }\n    \n}\n\nasync function fetchQuery(){\n    const params = new URLSearchParams({\n        key: API_KEY,\n        q: searchQuery,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n        per_page: queryLimit,\n        page: countPage,\n\n    });\n\n    return await axios.get(`${BASE_URL}?${params}`);\n    \n    // return await axios.get(`${BASE_URL}?key=${API_KEY}&q=${searchQuery}&image_type=photo&orientation=horizontal&safesearch=true`);\n    \n}\n\nfunction handlerQueryResponse(queryResponse){\n     if (queryResponse.data.hits.length===0){\n        Notify.failure('Sorry, there are no images matching your search query. Please try again.');\n    }\n    else{\n        renderMarkup(queryResponse);\n         \n        if(countPage>1){\n            const countImage=countPage*queryLimit;\n            Notify.info(`Hooray! We found ${countImage} images.`);\n        }\n\n        console.log(countPage,\"   \", queryResponse.data.totalHits/queryLimit);\n        if(countPage<queryResponse.data.totalHits/queryLimit){\n            observer.observe(refs.guard);\n\n        }else{\n            observer.unobserve(refs.guard);\n            Notify.info(\"We're sorry, but you've reached the end of search results.\");\n        }   \n    }\n}\n\nfunction renderMarkup(queryResponse){\n    const markup=createImageGalleryMarkup(queryResponse.data.hits);\n    refs.div.insertAdjacentHTML('beforeend', markup);\n    gallery.refresh();\n}\n\nfunction createImageGalleryMarkup(arr){\n    console.log(\"arr=\", arr);\n\n    return arr.map(({largeImageURL, webformatURL, tags, views, likes, comments, downloads})=>\n        `<div class=\"photo-card\">\n        <div class=\"img-thumb\">\n        <a href=\"${largeImageURL}\" class=\"photo-card__link\">\n        <img class=\"photo-card__image\" src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" data-source=\"large-image.jpg\"/>\n        </a>\n        </div>\n        <div class=\"info\">\n          <p class=\"info-item\">\n            <b>Likes</b>\n            <span>${likes}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Views</b>\n            <span>${views}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Comments</b>\n            <span>${comments}</span>\n          </p>\n          <p class=\"info-item\">\n            <b>Downloads</b>\n            <span>${downloads}</span>\n          </p>\n        </div>\n      </div>`).join('');\n}\n\nfunction onScrollPagination(entries, observer){\n  console.log('I am onScrollPagination');\n  entries.forEach((entry) => {\n    \n    if (entry.isIntersecting) {\n      countPage += 1;\n\n      fetchQuery()\n     .then(handlerQueryResponse)\n     .catch(err=>{\n      Notify.failure('Ooops! Something went wrong!');\n      console.error(err);\n     });\n    }\n  });\n}"],"names":["$2shzp","parcelRequire","$b02d73f657452650$var$countPage","$b02d73f657452650$var$searchQuery","$b02d73f657452650$var$refs","form","document","querySelector","input","div","guard","$b02d73f657452650$var$gallery","$parcel$interopDefault","$fZKcF","$b02d73f657452650$var$observer","IntersectionObserver","entries","observer","console","log","forEach","entry","isIntersecting","$b02d73f657452650$var$fetchQuery","then","$b02d73f657452650$var$handlerQueryResponse","catch","err","$iQIUW","Notify","failure","error","root","rootMargin","threshold","async","params","URLSearchParams","key","q","image_type","orientation","safesearch","per_page","page","default","get","queryResponse","data","hits","length","markup","arr","map","largeImageURL","webformatURL","tags","views","likes","comments","downloads","join","insertAdjacentHTML","refresh","$b02d73f657452650$var$renderMarkup","countImage","info","totalHits","observe","unobserve","addEventListener","event","preventDefault","innerHTML","currentTarget","elements","searchQuery","value","trim"],"version":3,"file":"scroll.87fc9f26.js.map"}